package asteroids.game;

import static asteroids.game.Constants.*;
import java.awt.*;
import java.util.Iterator;
import javax.swing.*;
import asteroids.participants.LifeShip;

/**
 * The area of the display in which the game takes place.
 */
@SuppressWarnings("serial")
public class Screen extends JPanel
{
    /** Legend that is displayed across the screen */
    private String legend;

    /** Level on Screen */
    private String level;

    /** Score on Screen */
    private String score;

    /** Game controller */
    private Controller controller;
    
    /** 
     * x coordinate of rectangle center
     */
    private int x;

    /** 
     * y coordinate of rectangle center
     */
    private int y;

    /**
     * Creates an empty screen
     */
    public Screen (Controller controller)
    {
        this.controller = controller;
        legend = "";
        setPreferredSize(new Dimension(SIZE, SIZE));
        setMinimumSize(new Dimension(SIZE, SIZE));
        setBackground(Color.black);
        setForeground(Color.white);
        setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 120));
        setFocusable(true);
    }

    /**
     * Set the legend
     */
    public void setLegend (String legend)
    {
        this.legend = legend;
    }
    

    /**
     * Paint the participants onto this panel
     */
    @Override
    public void paintComponent (Graphics graphics)
    {
        // Use better resolution
        Graphics2D g = (Graphics2D) graphics;
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        g.setRenderingHint(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY);

        // Do the default painting
        super.paintComponent(g);

        // Draw each participant in its proper place
        Iterator<Participant> iter = controller.getParticipants();
        while (iter.hasNext())
        {
            iter.next().draw(g);
        }

        // Draw the legend across the middle of the panel
        int size = g.getFontMetrics().stringWidth(legend);
        g.drawString(legend, (SIZE - size) / 2, SIZE / 2);

        // Draw the score
        if (controller.getScore() == -100)
        {
            g.setFont(new Font(Font.SANS_SERIF, Font.BOLD, 30));
            g.drawString("", LABEL_HORIZONTAL_OFFSET, LABEL_VERTICAL_OFFSET);
        }

        else
        {
            Rectangle rect = new Rectangle(LABEL_HORIZONTAL_OFFSET,LABEL_VERTICAL_OFFSET,1,1);
            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
            String text = Integer.toString(controller.getScore());
            FontMetrics metrics = g.getFontMetrics(font);
            x = rect.x + (1-metrics.stringWidth(text)) / 2;
            y = rect.y +(1+metrics.stringWidth(Integer.toString(0)));
           g.setFont(font);
            g.drawString(text, x, y);
        }

        // Draw the level
        if (controller.getLevel() == -100)
        {
            g.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 30));
            g.drawString("", 750 - LABEL_HORIZONTAL_OFFSET, LABEL_VERTICAL_OFFSET);
        }

        else
        {
            Rectangle rect = new Rectangle(750-LABEL_HORIZONTAL_OFFSET,LABEL_VERTICAL_OFFSET,1,1);
            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
            String text = Integer.toString(controller.getLevel());
            FontMetrics metrics = g.getFontMetrics(font);
            int x = rect.x + (metrics.stringWidth(text)) / 2;
            y = rect.y +(1+metrics.stringWidth(Integer.toString(0)));
           g.setFont(font);
            g.drawString(text, x, y);
        }

        // Draw the Ships:
        if (controller.getLives() == 3)
        {
            String text = (Integer.toString(controller.getScore()));
            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
            FontMetrics metrics = g.getFontMetrics(font);
            
            LifeShip ship1 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship1.setPosition(x -27 + metrics.stringWidth(text)/2  , y+27);
            ship1.move();
            ship1.draw(g);

            LifeShip ship2 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship2.setPosition(x + metrics.stringWidth(text)/2, y+27);
            ship2.move();
            ship2.draw(g);

            LifeShip ship3 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship3.setPosition(x + 27 + metrics.stringWidth(text) /2 , y+27);
            ship3.move();
            ship3.draw(g);

        }

        // Need to adjust so these re-center everytime
        if (controller.getLives() == 2)
        {
            String text = (Integer.toString(controller.getScore()));
            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
            FontMetrics metrics = g.getFontMetrics(font);
            
            LifeShip ship1 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship1.setPosition(x -13 + metrics.stringWidth(text)/2  , y+27);
            ship1.move();
            ship1.draw(g);

            LifeShip ship2 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship2.setPosition(x +14+ + metrics.stringWidth(text)/2, y+27);
            ship2.move();
            ship2.draw(g);
        }

        if (controller.getLives() == 1)
        {
            String text = (Integer.toString(controller.getScore()));
            Font font = new Font(Font.SANS_SERIF, Font.PLAIN, 30);
            FontMetrics metrics = g.getFontMetrics(font);
            
            LifeShip ship1 = new LifeShip(200, 200, -Math.PI / 2, controller);
            ship1.setPosition(x + metrics.stringWidth(text)/2  , y+27);
            ship1.move();
            ship1.draw(g);
        }

        if (controller.getLives() == 0)
        {

        }

    }
}
